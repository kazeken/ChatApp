@inherits LayoutComponentBase
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4">
            <a href="http://blazor.net" target="_blank" class="ml-md-auto">About</a>
        </div>

        <div class="content px-4">
            <CascadingValue Value="hubConnection">
                @Body
            </CascadingValue>
        </div>
    </div>
</div>

@code { 
    private HubConnection hubConnection;
    private List<string> roomsJoined = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        AppState.AppStateUpdated += async () =>
        {
            var newRooms = AppState.Rooms.Where(n => !roomsJoined.Contains(n.RoomName )).Select(n => n.RoomName).ToList();
            roomsJoined.AddRange(newRooms);

            foreach (var room in newRooms)
            {

                await hubConnection.SendAsync("JoinRoom", room);
            }
        };

        hubConnection = new HubConnectionBuilder()
           .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
           .Build();

        hubConnection.On<string, string, string>("ReceiveMessage", (user, message, roomName) =>
        {
            if(AppState.CurrentRoom?.RoomName == roomName)
            {
                var encodedMsg = $"{user}: {message}";
                AppState.CurrentRoom.ReceiveMessage(encodedMsg);
            }
            else
            {
                var room = AppState.Rooms.FirstOrDefault(n => n.RoomName == roomName);
                Console.WriteLine("Found Room: " + room.RoomName);
                if (!string.IsNullOrEmpty(room.RoomName))
                {
                    Console.WriteLine("Notification Increasing");
                    room.NotificationCount++;
                    AppState.AppStateUpdated.Invoke();

                }
            }
        });

        await hubConnection.StartAsync();

        //await hubConnection.SendAsync("JoinRoom", RoomName);
    }


    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

}
